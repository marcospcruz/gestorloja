package br.com.marcospcruz.gestorloja.view.fxui.custom;

import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.stream.Collectors;

import br.com.marcospcruz.gestorloja.controller.ControllerBase;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Side;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.CustomMenuItem;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextField;

/**
 * This class is a TextField which implements an "autocomplete" functionality,
 * based on a supplied list of entries.
 * 
 * @author Caleb Brinkman
 * @author MarcosPereiradaCruz I did some modifications.
 */
public class AutoCompleteTextField<T> extends TextField {
	/** The existing autocomplete entries. */
	private SortedSet<T> entries;
	/** The popup used to select an entry. */
	private MyContextMenu<T> entriesPopup;
	private List<T> searchResult;

	private T t;

	/**
	 * Construct a new AutoCompleteTextField.
	 * 
	 * @param tipoProdutoController
	 */
	public AutoCompleteTextField(ControllerBase controller) {
		super();
		entries = new TreeSet<>();
		entriesPopup = new MyContextMenu<>();
		textProperty().addListener(new ChangeListener<String>() {

			@Override
			public void changed(ObservableValue<? extends String> observableValue, String s, String s2) {
				String text = getText();

				T t = (T) controller.getItem();
				if (getText().length() == 0) {
					entriesPopup.hide();
				} else {

					// LinkedList<T> searchResult = new LinkedList<>();
					searchResult = entries.stream()
							.filter(item -> item.toString().toUpperCase().contains(text.toUpperCase()))
							.collect(Collectors.toCollection(LinkedList::new));
					// searchResult.addAll(entries.subSet(getText(), getText() +
					// Character.MAX_VALUE));
					// searchResult.addAll(entries.subSet(getText(), getText() +
					// Character.MAX_VALUE));

					if (entries.size() > 0) {
						populatePopup(searchResult);
						showPopUp();

					} else {
						entriesPopup.hide();
					}
				}
			}
		});

		focusedProperty().addListener(new ChangeListener<Boolean>() {
			@Override
			public void changed(ObservableValue<? extends Boolean> observableValue, Boolean aBoolean,
					Boolean aBoolean2) {
				entriesPopup.hide();
			}
		});

	}

	/**
	 * Get the existing set of autocomplete entries.
	 * 
	 * @return The existing autocomplete entries.
	 */
	public SortedSet<T> getEntries() {
		return entries;
	}

	/**
	 * Populate the entry set with the given search results. Display is limited to
	 * 10 entries, for performance.
	 * 
	 * @param searchResult
	 *            The set of matching strings.
	 */
	private void populatePopup(List<T> searchResult) {
		List<CustomMenuItem> menuItems = new LinkedList<>();
		// If you'd like more entries, modify this line.
		int maxEntries = 10;
		int count = Math.min(searchResult.size(), maxEntries);
		for (int i = 0; i < count; i++) {
			final T result = searchResult.get(i);
			Label entryLabel = new Label(result.toString());
			CustomMenuItem item = new CustomMenuItem(entryLabel, true);
			item.setOnAction(new EventHandler<ActionEvent>() {
				@Override
				public void handle(ActionEvent actionEvent) {
				
					setText(result.toString());
					entriesPopup.hide();
					setFoundValue(result);
				}
			});
			menuItems.add(item);
		}
		entriesPopup.getItems().clear();
		entriesPopup.getItems().addAll(menuItems);

	}

	public void setEntries(SortedSet<T> entries) {
		this.entries = entries;
		populatePopup(new ArrayList<>(entries));
	}

	public void setFoundValue(T t) {
		this.t = t;
	}

	public T getFoundValue() {
		
		return searchResult.get(0);
	}

	public void showPopUp() {
		if (!entriesPopup.isShowing()) {
			entriesPopup.show(AutoCompleteTextField.this, Side.BOTTOM, 0, 0);
		}

	}

	public void setOnActionListener(EventHandler<ActionEvent> listener) {
		entriesPopup.setOnAction(listener);
	}
}